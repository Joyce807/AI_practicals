'''

                            Online Python Compiler.
                Code, Compile, Run and Debug python program online.
Write your code in this editor and press "Run" button to execute it.

'''

import random


def generate_board(n):
    # Generate a random board configuration
    board = []
    for _ in range(n):
        row = random.randint(0, n-1)
        board.append(row)
    return board


def calculate_attacks(board):
    # Calculate the number of queen attacks on the board
    n = len(board)
    attacks = 0

    for i in range(n):
        for j in range(i+1, n):
            if board[i] == board[j] or abs(board[i] - board[j]) == j - i:
                attacks += 1

    return attacks


def hill_climbing(n):
    current_board = generate_board(n)
    current_attacks = calculate_attacks(current_board)

    while True:
        neighbors = []
        for col in range(n):
            for row in range(n):
                if current_board[col] != row:
                    neighbor_board = list(current_board)
                    neighbor_board[col] = row
                    neighbors.append(neighbor_board)

        if not neighbors:
            break

        neighbor_attacks = [calculate_attacks(neighbor) for neighbor in neighbors]
        best_neighbor_attacks = min(neighbor_attacks)

        if best_neighbor_attacks >= current_attacks:
            # Reached a local minimum
            break

        best_neighbors = [neighbors[i] for i in range(len(neighbors)) if neighbor_attacks[i] == best_neighbor_attacks]
        current_board = random.choice(best_neighbors)
        current_attacks = best_neighbor_attacks

    return current_board, current_attacks


def print_board(board):
    n = len(board)
    for row in range(n):
        line = ""
        for col in range(n):
            if board[col] == row:
                line += "Q "
            else:
                line += "- "
        print(line)
    print()


# Main program
n = int(input("Enter the number of queens: "))

board, attacks = hill_climbing(n)

if attacks == 0:
    print("Solution found:")
    print_board(board)
else:
    print("No solution found. Best configuration:")
    print_board(board)
    print("Number of attacks:", attacks)

